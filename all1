// Code.gs
function doGet() {
  return HtmlService.createTemplateFromFile('index')
    .evaluate()
    .setTitle('Enhanced Analytics Dashboard')
    .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
}

function include(filename) {
  return HtmlService.createHtmlOutputFromFile(filename).getContent();
}

// Mock data functions (in real app, these would fetch from Sheets or other sources)
function getAnalyticsData(timeRange) {
  return {
    metrics: {
      revenue: 124567,
      users: 2345,
      conversionRate: 4.2,
      sessionDuration: "5m 23s",
      growth: 12.5
    },
    revenueData: generateTimeSeriesData(timeRange),
    userData: generateTimeSeriesData(timeRange),
    transactions: getTransactions()
  };
}

function generateTimeSeriesData(days) {
  const data = [];
  for (let i = 0; i < days; i++) {
    data.push({
      date: new Date(Date.now() - (i * 24 * 60 * 60 * 1000)),
      value: Math.floor(Math.random() * 1000) + 500
    });
  }
  return data;
}

function getTransactions() {
  // Mock transaction data
  return Array.from({length: 10}, (_, i) => ({
    date: new Date(Date.now() - (i * 3600000)),
    id: 'TRX' + Math.random().toString(36).substr(2, 9).toUpperCase(),
    customer: `Customer ${i + 1}`,
    amount: (Math.random() * 1000 + 100).toFixed(2),
    status: ['Completed', 'Pending', 'Failed'][Math.floor(Math.random() * 3)]
  }));
}

// index.html
<!DOCTYPE html>
<html>
  <head>
    <base target="_top">
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.7.0/chart.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
    <?!= include('styles'); ?>
  </head>
  <body>
    <div class="dashboard-container">
      <div class="header">
        <div class="header-top">
          <h1>Analytics Dashboard</h1>
          <div class="user-menu">
            <button class="theme-toggle" onclick="toggleTheme()">
              <i class="fas fa-moon"></i>
            </button>
            <div class="notifications">
              <i class="fas fa-bell"></i>
              <span class="notification-badge">3</span>
            </div>
          </div>
        </div>
        <div class="filter-container">
          <select id="timeRange" onchange="refreshData()">
            <option value="7">Last 7 days</option>
            <option value="30">Last 30 days</option>
            <option value="90">Last 90 days</option>
          </select>
          <div class="date-picker">
            <input type="date" id="startDate">
            <input type="date" id="endDate">
          </div>
          <button onclick="refreshData()" class="refresh-btn">
            <i class="fas fa-sync-alt"></i> Refresh
          </button>
        </div>
      </div>
      
      <div class="stats-container">
        <!-- Metric cards will be dynamically populated -->
      </div>
      
      <div class="chart-container">
        <div class="chart-card">
          <div class="chart-header">
            <h3>Revenue Trend</h3>
            <div class="chart-controls">
              <button onclick="toggleChartType('revenue')">Toggle Chart</button>
              <button onclick="downloadChart('revenue')">Export</button>
            </div>
          </div>
          <canvas id="revenueChart"></canvas>
        </div>
        <div class="chart-card">
          <div class="chart-header">
            <h3>User Activity</h3>
            <div class="chart-controls">
              <button onclick="toggleChartType('users')">Toggle Chart</button>
              <button onclick="downloadChart('users')">Export</button>
            </div>
          </div>
          <canvas id="usersChart"></canvas>
        </div>
      </div>
      
      <div class="table-container">
        <div class="table-header">
          <h2>Recent Transactions</h2>
          <div class="table-controls">
            <input type="text" id="tableSearch" placeholder="Search transactions..." onkeyup="filterTransactions()">
            <button onclick="exportTransactions()">Export to CSV</button>
          </div>
        </div>
        <div class="table-wrapper">
          <table>
            <thead>
              <tr>
                <th onclick="sortTable(0)">Date ↕</th>
                <th onclick="sortTable(1)">Transaction ID ↕</th>
                <th onclick="sortTable(2)">Customer ↕</th>
                <th onclick="sortTable(3)">Amount ↕</th>
                <th onclick="sortTable(4)">Status ↕</th>
              </tr>
            </thead>
            <tbody id="transactionTable">
              <!-- Data will be populated by JavaScript -->
            </tbody>
          </table>
        </div>
        <div class="table-footer">
          <div class="pagination">
            <!-- Pagination controls will be dynamically populated -->
          </div>
        </div>
      </div>
    </div>
    <?!= include('javascript'); ?>
  </body>
</html>

// javascript.html
<script>
let charts = {};
let currentData = {};
let darkMode = false;

// Initialize dashboard
window.onload = function() {
  refreshData();
  initializeEventListeners();
};

function initializeEventListeners() {
  // Date picker listeners
  const startDate = document.getElementById('startDate');
  const endDate = document.getElementById('endDate');
  
  startDate.valueAsDate = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);
  endDate.valueAsDate = new Date();
  
  [startDate, endDate].forEach(input => {
    input.addEventListener('change', refreshData);
  });
  
  // Add responsive sidebar toggle
  const sidebar = document.querySelector('.sidebar');
  if (sidebar) {
    document.querySelector('.sidebar-toggle').addEventListener('click', () => {
      sidebar.classList.toggle('collapsed');
    });
  }
}

async function refreshData() {
  showLoader();
  try {
    const timeRange = document.getElementById('timeRange').value;
    const data = await google.script.run.withSuccessHandler(updateDashboard).getAnalyticsData(timeRange);
  } catch (error) {
    showError('Failed to fetch data. Please try again.');
  }
  hideLoader();
}

function updateDashboard(data) {
  currentData = data;
  updateMetrics(data.metrics);
  updateCharts(data);
  updateTransactionTable(data.transactions);
}

function updateMetrics(metrics) {
  const container = document.querySelector('.stats-container');
  container.innerHTML = `
    <div class="stat-card">
      <h3>Total Revenue</h3>
      <div class="value">$${numberWithCommas(metrics.revenue)}</div>
      <div class="trend ${metrics.growth > 0 ? 'positive' : 'negative'}">
        ${metrics.growth}% from last period
      </div>
    </div>
    <!-- Add more metric cards -->
  `;
}

function updateCharts(data) {
  updateRevenueChart(data.revenueData);
  updateUsersChart(data.userData);
}

function updateRevenueChart(data) {
  const ctx = document.getElementById('revenueChart');
  if (charts.revenue) charts.revenue.destroy();
  
  charts.revenue = new Chart(ctx, {
    type: 'line',
    data: {
      labels: data.map(d => moment(d.date).format('MMM DD')),
      datasets: [{
        label: 'Revenue',
        data: data.map(d => d.value),
        borderColor: '#3498db',
        tension: 0.4,
        fill: true,
        backgroundColor: 'rgba(52, 152, 219, 0.1)'
      }]
    },
    options: {
      responsive: true,
      interaction: {
        intersect: false,
        mode: 'index'
      },
      plugins: {
        tooltip: {
          callbacks: {
            label: function(context) {
              return `Revenue: $${numberWithCommas(context.raw)}`;
            }
          }
        }
      }
    }
  });
}

function toggleChartType(chartId) {
  const chart = charts[chartId];
  if (!chart) return;
  
  const newType = chart.config.type === 'line' ? 'bar' : 'line';
  const ctx = chart.canvas;
  chart.destroy();
  
  const newConfig = {...chart.config, type: newType};
  charts[chartId] = new Chart(ctx, newConfig);
}

function downloadChart(chartId) {
  const chart = charts[chartId];
  if (!chart) return;
  
  const link = document.createElement('a');
  link.download = `${chartId}-chart.png`;
  link.href = chart.canvas.toDataURL('image/png');
  link.click();
}

function filterTransactions() {
  const searchTerm = document.getElementById('tableSearch').value.toLowerCase();
  const filteredData = currentData.transactions.filter(t => 
    Object.values(t).some(value => 
      String(value).toLowerCase().includes(searchTerm)
    )
  );
  updateTransactionTable(filteredData);
}

function exportTransactions() {
  const headers = ['Date', 'Transaction ID', 'Customer', 'Amount', 'Status'];
  const csv = [
    headers.join(','),
    ...currentData.transactions.map(t => [
      moment(t.date).format('YYYY-MM-DD HH:mm'),
      t.id,
      t.customer,
      t.amount,
      t.status
    ].join(','))
  ].join('\n');
  
  const blob = new Blob([csv], { type: 'text/csv' });
  const url = window.URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = 'transactions.csv';
  link.click();
}

function toggleTheme() {
  darkMode = !darkMode;
  document.body.classList.toggle('dark-mode');
  Object.values(charts).forEach(chart => {
    chart.options.plugins.legend.labels.color = darkMode ? '#fff' : '#666';
    chart.update();
  });
}

// Utility functions
function showLoader() {
  // Add loading indicator implementation
}

function hideLoader() {
  // Remove loading indicator implementation
}

function showError(message) {
  // Add error message display implementation
}

function numberWithCommas(x) {
  return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
}
</script>

// styles.html
<style>
:root {
  --primary-color: #3498db;
  --secondary-color: #2ecc71;
  --background-color: #f5f6fa;
  --card-background: #ffffff;
  --text-color: #2c3e50;
  --border-color: #ddd;
  --shadow-color: rgba(0,0,0,0.1);
}

.dark-mode {
  --background-color: #1a1a1a;
  --card-background: #2d2d2d;
  --text-color: #ffffff;
  --border-color: #404040;
  --shadow-color: rgba(0,0,0,0.3);
}

* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

body {
  background-color: var(--background-color);
  color: var(--text-color);
  transition: all 0.3s ease;
}

.dashboard-container {
  max-width: 1400px;
  margin: 0 auto;
  padding: 20px;
}

.header {
  background-color: var(--card-background);
  padding: 20px;
  border-radius: 10px;
  box-shadow: 0 2px 4px var(--shadow-color);
  margin-bottom: 20px;
}

.header-top {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
}

.user-menu {
  display: flex;
  gap: 15px;
  align-items: center;
}

.notifications {
  position: relative;
}

.notification-badge {
  position: absolute;
  top: -8px;
  right: -8px;
  background-color: var(--primary-color);
  color: white;
  border-radius: 50%;
  padding: 2px 6px;
  font-size: 0.8em;
}

.filter-container {
  display: flex;
  gap: 15px;
  flex-wrap: wrap;
}

.date-picker {
  display: flex;
  gap: 10px;
}

input[type="date"],
select,
button {
  padding: 8px 12px;
  border: 1px solid var(--border-color);
  border-radius: 5px;
  background-color: var(--card-background);
  color: var(--text-color);
}

button {
  background-color: var(--primary-color);
  color: white;
  border: none;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

button:hover {
  background-color: #2980b9;
}

.stats-container {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 20px;
  margin-bottom: 20px;
}

.stat-card {
  background-color: var(--card-background);
  padding: 20px;
  border-radius: 10px;
  box-shadow: 0 2px 4px var(--shadow-color);
}

.trend {
  font-size: 0.9em;
  margin-top: 5px;
}

.trend.positive {
  color: var(--secondary-color);
}

.trend.negative {
  color: #e74c3c;
}

.chart-container {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));
  gap: 20px;
  margin-bottom: 20px;
